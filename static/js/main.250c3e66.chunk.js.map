{"version":3,"sources":["serviceWorker.tsx","common/components/AddItemForm/AddItemForm.tsx","common/components/EditableSpan/EditableSpan.tsx","api/todolists-api.ts","common/utils/error-utils.ts","store/auth.ts","store/init.ts","common/types/types.ts","store/tasks.ts","features/TodolistsList/Todolist/Task/Task.tsx","store/todolists.ts","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","common/components/ErrorSnackbar/ErrorSnackbar.tsx","features/Login/Login.tsx","app/App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","AddItemForm","React","memo","addItem","placeholder","disabled","useState","title","setTitle","error","setError","addItemHandler","trim","TextField","variant","value","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","props","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","post","id","delete","put","todolistId","taskId","taskTitile","model","authAPI","data","handleServerAppError","messages","length","init","setAppError","setAppStatus","handleServerNetworkError","message","isLoggedIn","logIn","flow","param","res","resultCode","this","logOut","makeAutoObservable","status","isInitialized","initializeApp","auth","setIsLoggedIn","TaskStatuses","TaskPriorities","tasksData","fetchTasks","items","removeTask","tasks","index","findIndex","t","splice","addTask","unshift","item","updateTask","domainModel","task","find","console","apiModel","deadline","description","priority","startDate","Task","removeTaskHandler","useCallback","onChangeHandler","newIsDoneValue","checked","Completed","New","onTitleChangeHandler","newValue","key","className","Checkbox","Delete","todos","fetchTodolists","map","tl","filter","entityStatus","removeTodolist","changeTodolistEntityStatus","deleteTodolist","addTodolist","changeTodolistTitle","Todolist","observer","demo","todolist","useEffect","todolists","changeFilterClickHandler","changeTodolistFilter","tasksForTodolist","style","paddingTop","Button","TodolistsList","todolistsItems","Grid","container","margin","width","padding","justifyContent","spacing","Paper","backgroundColor","borderRadius","to","Alert","elevation","ErrorSnackbar","handleClose","event","reason","isOpen","Snackbar","open","autoHideDuration","onClose","severity","Login","formik","useFormik","validate","values","email","password","initialValues","rememberMe","onSubmit","xs","handleSubmit","FormControl","marginTop","FormLabel","href","target","rel","FormGroup","getFieldProps","errors","type","FormControlLabel","control","App","logoutHandler","AppBar","position","background","Toolbar","Typography","right","LinearProgress","Container","exact","path","render","top","textAlign","CircularProgress","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.250c3e66.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n   window.location.hostname === 'localhost' ||\n      // [::1] is the IPv6 localhost address.\n      window.location.hostname === '[::1]' ||\n      // 127.0.0.0/8 are considered localhost for IPv4.\n      window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n)\n\ntype Config = {\n   onSuccess?: (registration: ServiceWorkerRegistration) => void\n   onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n   if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n      // The URL constructor is available in all browsers that support SW.\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n      if (publicUrl.origin !== window.location.origin) {\n         // Our service worker won't work if PUBLIC_URL is on a different origin\n         // from what our page is served on. This might happen if a CDN is used to\n         // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n         return\n      }\n\n      window.addEventListener('load', () => {\n         const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n         if (isLocalhost) {\n            // This is running on localhost. Let's check if a service worker still exists or not.\n            checkValidServiceWorker(swUrl, config)\n\n            // Add some additional logging to localhost, pointing developers to the\n            // service worker/PWA documentation.\n            navigator.serviceWorker.ready.then(() => {\n               console.log(\n                  'This web app is being served cache-first by a service ' +\n                     'worker. To learn more, visit https://bit.ly/CRA-PWA'\n               )\n            })\n         } else {\n            // Is not localhost. Just register service worker\n            registerValidSW(swUrl, config)\n         }\n      })\n   }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n   navigator.serviceWorker\n      .register(swUrl)\n      .then(registration => {\n         registration.onupdatefound = () => {\n            const installingWorker = registration.installing\n            if (installingWorker == null) {\n               return\n            }\n            installingWorker.onstatechange = () => {\n               if (installingWorker.state === 'installed') {\n                  if (navigator.serviceWorker.controller) {\n                     // At this point, the updated precached content has been fetched,\n                     // but the previous service worker will still serve the older\n                     // content until all client tabs are closed.\n                     console.log(\n                        'New content is available and will be used when all ' +\n                           'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                     )\n\n                     // Execute callback\n                     if (config && config.onUpdate) {\n                        config.onUpdate(registration)\n                     }\n                  } else {\n                     // At this point, everything has been precached.\n                     // It's the perfect time to display a\n                     // \"Content is cached for offline use.\" message.\n                     console.log('Content is cached for offline use.')\n\n                     // Execute callback\n                     if (config && config.onSuccess) {\n                        config.onSuccess(registration)\n                     }\n                  }\n               }\n            }\n         }\n      })\n      .catch(error => {\n         console.error('Error during service worker registration:', error)\n      })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n   // Check if the service worker can be found. If it can't reload the page.\n   fetch(swUrl, {\n      headers: { 'Service-Worker': 'script' },\n   })\n      .then(response => {\n         // Ensure service worker exists, and that we really are getting a JS file.\n         const contentType = response.headers.get('content-type')\n         if (\n            response.status === 404 ||\n            (contentType != null && contentType.indexOf('javascript') === -1)\n         ) {\n            // No service worker found. Probably a different app. Reload the page.\n            navigator.serviceWorker.ready.then(registration => {\n               registration.unregister().then(() => {\n                  window.location.reload()\n               })\n            })\n         } else {\n            // Service worker found. Proceed as normal.\n            registerValidSW(swUrl, config)\n         }\n      })\n      .catch(() => {\n         console.log('No internet connection found. App is running in offline mode.')\n      })\n}\n\nexport function unregister() {\n   if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.ready\n         .then(registration => {\n            registration.unregister()\n         })\n         .catch(error => {\n            console.error(error.message)\n         })\n   }\n}\n","import React, { ChangeEvent, KeyboardEvent, useState } from 'react'\r\nimport { IconButton, TextField } from '@material-ui/core'\r\nimport { AddBox } from '@material-ui/icons'\r\nimport { AddItemFormPropsType } from '../../types/types'\r\n\r\nexport const AddItemForm = React.memo(function ({\r\n   addItem,\r\n   placeholder,\r\n   disabled = false,\r\n}: AddItemFormPropsType) {\r\n   const [title, setTitle] = useState('')\r\n   const [error, setError] = useState<string | null>(null)\r\n\r\n   const addItemHandler = () => {\r\n      if (title.trim() !== '') {\r\n         addItem(title)\r\n         setTitle('')\r\n      } else {\r\n         setError('Title is required')\r\n      }\r\n   }\r\n\r\n   const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n      setTitle(e.currentTarget.value)\r\n   }\r\n\r\n   const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n      if (error !== null) {\r\n         setError(null)\r\n      }\r\n      if (e.charCode === 13) {\r\n         addItemHandler()\r\n      }\r\n   }\r\n\r\n   return (\r\n      <div>\r\n         <TextField\r\n            variant=\"outlined\"\r\n            disabled={disabled}\r\n            error={!!error}\r\n            value={title}\r\n            onChange={onChangeHandler}\r\n            onKeyPress={onKeyPressHandler}\r\n            label={placeholder}\r\n            helperText={error}\r\n         />\r\n         <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled}>\r\n            <AddBox />\r\n         </IconButton>\r\n      </div>\r\n   )\r\n})\r\n","import React, { ChangeEvent, useState } from 'react'\r\nimport { TextField } from '@material-ui/core'\r\nimport { EditableSpanPropsType } from '../../types/types'\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n   const [editMode, setEditMode] = useState(false)\r\n   const [title, setTitle] = useState(props.value)\r\n\r\n   const activateEditMode = () => {\r\n      setEditMode(true)\r\n      setTitle(props.value)\r\n   }\r\n   const activateViewMode = () => {\r\n      setEditMode(false)\r\n      props.onChange(title)\r\n   }\r\n   const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n      setTitle(e.currentTarget.value)\r\n   }\r\n\r\n   return editMode ? (\r\n      <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode} />\r\n   ) : (\r\n      <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n   )\r\n})\r\n","import axios from 'axios'\r\nimport {\r\n   GetTasksResponse,\r\n   TodolistType,\r\n   UpdateTaskModelType,\r\n   ResponseType,\r\n} from '../common/types/types'\r\nimport { LoginParamsType, TaskType } from '../common/types/types'\r\n\r\nconst settings = {\r\n   withCredentials: true,\r\n   headers: {\r\n      'API-KEY': '45599275-fc7c-4215-aaa5-a9a36d291e1f',\r\n   },\r\n}\r\nexport const instance = axios.create({\r\n   baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n   ...settings,\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n   getTodolists() {\r\n      return instance.get<TodolistType[]>('todo-lists')\r\n   },\r\n   createTodolist(title: string) {\r\n      return instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', { title: title })\r\n   },\r\n   deleteTodolist(id: string) {\r\n      return instance.delete<ResponseType>(`todo-lists/${id}`)\r\n   },\r\n   updateTodolist(id: string, title: string) {\r\n      return instance.put<ResponseType>(`todo-lists/${id}`, { title: title })\r\n   },\r\n   getTasks(todolistId: string) {\r\n      return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`)\r\n   },\r\n   deleteTask(todolistId: string, taskId: string) {\r\n      return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`)\r\n   },\r\n   createTask(todolistId: string, taskTitile: string) {\r\n      return instance.post<ResponseType<{ item: TaskType }>>(`todo-lists/${todolistId}/tasks`, {\r\n         title: taskTitile,\r\n      })\r\n   },\r\n   updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n      return instance.put<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model)\r\n   },\r\n}\r\n\r\nexport const authAPI = {\r\n   login(data: LoginParamsType) {\r\n      return instance.post<ResponseType<{ userId?: number }>>('auth/login', data)\r\n   },\r\n   logout() {\r\n      return instance.delete<ResponseType<{ userId?: number }>>('auth/login')\r\n   },\r\n   me() {\r\n      return instance.get<ResponseType<{ id: number; email: string; login: string }>>('auth/me')\r\n   },\r\n}\r\n","import init from '../../store/init'\r\nimport { ResponseType } from '../types/types'\r\n\r\nexport const handleServerAppError = <D>(data: ResponseType<D>) => {\r\n   if (data.messages.length) {\r\n      init.setAppError(data.messages[0])\r\n   } else {\r\n      init.setAppError('Some error occurred')\r\n   }\r\n   init.setAppStatus('failed')\r\n}\r\n\r\nexport const handleServerNetworkError = (error: { message: string }) => {\r\n   init.setAppError(error.message ? error.message : 'Some error occurred')\r\n   init.setAppStatus('failed')\r\n}\r\n","import { flow, makeAutoObservable } from 'mobx'\r\nimport init from './init'\r\nimport { authAPI } from '../api/todolists-api'\r\nimport { handleServerAppError, handleServerNetworkError } from '../common/utils/error-utils'\r\nimport { LoginParamsType } from '../common/types/types'\r\n\r\nclass Auth {\r\n   isLoggedIn = false\r\n   constructor() {\r\n      makeAutoObservable(this)\r\n   }\r\n\r\n   setIsLoggedIn(value: boolean) {\r\n      this.isLoggedIn = value\r\n   }\r\n   logIn = flow(function* (this: Auth, param: LoginParamsType) {\r\n      init.setAppStatus('loading')\r\n\r\n      try {\r\n         const res = yield authAPI.login(param)\r\n         if (res.data.resultCode === 0) {\r\n            init.setAppStatus('succeeded')\r\n            this.isLoggedIn = true\r\n         } else {\r\n            handleServerAppError(res.data)\r\n         }\r\n      } catch (err: any) {\r\n         handleServerNetworkError(err)\r\n         init.setAppError('error')\r\n      }\r\n   })\r\n   logOut = flow(function* (this: Auth) {\r\n      init.setAppStatus('loading')\r\n      try {\r\n         const res = yield authAPI.logout()\r\n         if (res.data.resultCode === 0) {\r\n            init.setAppStatus('succeeded')\r\n            this.isLoggedIn = false\r\n         } else {\r\n            handleServerAppError(res.data)\r\n         }\r\n      } catch (err: any) {\r\n         handleServerNetworkError(err)\r\n      }\r\n   })\r\n}\r\nexport default new Auth()\r\n","import { flow, makeAutoObservable } from 'mobx'\r\nimport { authAPI } from '../api/todolists-api'\r\nimport auth from './auth'\r\nimport { RequestStatusType } from '../common/types/types'\r\n\r\nclass Init {\r\n   status: RequestStatusType = 'idle'\r\n   error: string | null = null\r\n   isInitialized = false\r\n   constructor() {\r\n      makeAutoObservable(this)\r\n   }\r\n   setAppError(error: string | null) {\r\n      this.error = error\r\n   }\r\n   setAppStatus(status: RequestStatusType) {\r\n      this.status = status\r\n   }\r\n   initializeApp = flow(function* (this: Init) {\r\n      try {\r\n         const res = yield authAPI.me()\r\n         if (res.data.resultCode === 0) {\r\n            this.isInitialized = true\r\n            auth.setIsLoggedIn(true)\r\n         }\r\n         if (res.data.resultCode === 1) {\r\n            this.isInitialized = true\r\n            auth.setIsLoggedIn(false)\r\n         }\r\n      } catch (err) {\r\n         this.error = 'error'\r\n      }\r\n   })\r\n}\r\nexport default new Init()\r\n","export type ComponentType = {\r\n   demo?: boolean\r\n}\r\nexport type LoginParamsType = {\r\n   email: string\r\n   password: string\r\n   rememberMe: boolean\r\n   captcha?: string\r\n}\r\nexport type TodolistType = {\r\n   id: string\r\n   title: string\r\n   addedDate: string\r\n   order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n   resultCode: number\r\n   messages: Array<string>\r\n   data: D\r\n}\r\nexport enum TaskStatuses {\r\n   New = 0,\r\n   InProgress = 1,\r\n   Completed = 2,\r\n   Draft = 3,\r\n}\r\nexport enum TaskPriorities {\r\n   Low = 0,\r\n   Middle = 1,\r\n   Hi = 2,\r\n   Urgently = 3,\r\n   Later = 4,\r\n}\r\nexport type TaskType = {\r\n   description: string\r\n   title: string\r\n   status: TaskStatuses\r\n   priority: TaskPriorities\r\n   startDate: string\r\n   deadline: string\r\n   id: string\r\n   todoListId: string\r\n   order: number\r\n   addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n   title: string\r\n   description: string\r\n   status: TaskStatuses\r\n   priority: TaskPriorities\r\n   startDate: string\r\n   deadline: string\r\n}\r\nexport type GetTasksResponse = {\r\n   error: string | null\r\n   totalCount: number\r\n   items: TaskType[]\r\n}\r\nexport type FormValuesType = {\r\n   email: string\r\n   password: string\r\n   rememberMe: boolean\r\n}\r\nexport type TodolistComponentType = {\r\n   todolist: TodolistDomainType\r\n   demo?: boolean\r\n}\r\nexport type TaskPropsType = {\r\n   task: TaskType\r\n   todolistId: string\r\n}\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type TasksStateType = {\r\n   [key: string]: Array<TaskType>\r\n}\r\nexport type UpdateDomainTaskModelType = {\r\n   title?: string\r\n   description?: string\r\n   status?: TaskStatuses\r\n   priority?: TaskPriorities\r\n   startDate?: string\r\n   deadline?: string\r\n}\r\nexport type FilterValuesType = 'all' | 'active' | 'completed'\r\nexport type TodolistDomainType = TodolistType & {\r\n   filter: FilterValuesType\r\n   entityStatus: RequestStatusType\r\n}\r\nexport type AddItemFormPropsType = {\r\n   addItem: (title: string) => void\r\n   disabled?: boolean\r\n   placeholder: string\r\n}\r\nexport type EditableSpanPropsType = {\r\n   value: string\r\n   onChange: (newValue: string) => void\r\n}\r\n","import { flow, makeAutoObservable } from 'mobx'\r\nimport { todolistsAPI } from '../api/todolists-api'\r\nimport init from './init'\r\nimport { handleServerAppError, handleServerNetworkError } from '../common/utils/error-utils'\r\nimport {\r\n   TasksStateType,\r\n   UpdateDomainTaskModelType,\r\n   UpdateTaskModelType,\r\n} from '../common/types/types'\r\n\r\nclass Tasks {\r\n   tasksData: TasksStateType = {}\r\n\r\n   constructor() {\r\n      makeAutoObservable(this)\r\n   }\r\n\r\n   fetchTasks = flow(function* (this: Tasks, todolistId: string) {\r\n      init.setAppStatus('loading')\r\n      try {\r\n         init.setAppStatus('succeeded')\r\n         const res = yield todolistsAPI.getTasks(todolistId)\r\n\r\n         this.tasksData[todolistId] = res.data.items\r\n      } catch (err: any) {\r\n         handleServerNetworkError(err)\r\n      }\r\n   })\r\n   removeTask = flow(function* (this: Tasks, taskId: string, todolistId: string) {\r\n      init.setAppStatus('loading')\r\n      try {\r\n         yield todolistsAPI.deleteTask(todolistId, taskId)\r\n         const tasks = this.tasksData[todolistId]\r\n         const index = tasks.findIndex(t => t.id === taskId)\r\n         if (index > -1) {\r\n            tasks.splice(index, 1)\r\n         }\r\n         init.setAppStatus('succeeded')\r\n      } catch (err: any) {\r\n         handleServerNetworkError(err)\r\n      }\r\n   })\r\n   addTask = flow(function* (this: Tasks, title: string, todolistId: string) {\r\n      init.setAppStatus('loading')\r\n      try {\r\n         const res = yield todolistsAPI.createTask(todolistId, title)\r\n         if (res.data.resultCode === 0) {\r\n            init.setAppStatus('succeeded')\r\n            this.tasksData[todolistId].unshift(res.data.data.item)\r\n         } else {\r\n            handleServerAppError(res.data)\r\n         }\r\n      } catch (err: any) {\r\n         handleServerNetworkError(err)\r\n      }\r\n   })\r\n   updateTask = flow(function* (\r\n      this: Tasks,\r\n      taskId: string,\r\n      todolistId: string,\r\n      domainModel: UpdateDomainTaskModelType\r\n   ) {\r\n      init.setAppStatus('loading')\r\n      const task = this.tasksData[todolistId].find(t => t.id === taskId)\r\n      if (!task) {\r\n         return console.error('task not found in the state')\r\n      }\r\n      const apiModel: UpdateTaskModelType = {\r\n         deadline: task.deadline,\r\n         description: task.description,\r\n         priority: task.priority,\r\n         startDate: task.startDate,\r\n         title: task.title,\r\n         status: task.status,\r\n         ...domainModel,\r\n      }\r\n\r\n      try {\r\n         const res = yield todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n         if (res.data.resultCode === 0) {\r\n            init.setAppStatus('succeeded')\r\n            const tasks = this.tasksData[todolistId]\r\n            const index = tasks.findIndex(t => t.id === taskId)\r\n            if (index > -1) {\r\n               tasks[index] = { ...tasks[index], ...domainModel }\r\n            }\r\n         } else {\r\n            handleServerAppError(res.data)\r\n         }\r\n      } catch (err: any) {\r\n         handleServerNetworkError(err)\r\n      }\r\n   })\r\n   deleteTodolist(todolistId: string) {\r\n      delete this.tasksData[todolistId]\r\n   }\r\n}\r\nexport default new Tasks()\r\n","import React, { ChangeEvent, useCallback } from 'react'\r\nimport { Checkbox, IconButton } from '@material-ui/core'\r\nimport { EditableSpan } from '../../../../common/components/EditableSpan/EditableSpan'\r\nimport { Delete } from '@material-ui/icons'\r\nimport tasks from '../../../../store/tasks'\r\nimport { TaskPropsType, TaskStatuses } from '../../../../common/types/types'\r\n\r\nexport const Task = React.memo(({ task, todolistId }: TaskPropsType) => {\r\n   const removeTaskHandler = useCallback(\r\n      () => tasks.removeTask(task.id, todolistId),\r\n      [task.id, todolistId]\r\n   )\r\n   const onChangeHandler = useCallback(\r\n      (e: ChangeEvent<HTMLInputElement>) => {\r\n         const newIsDoneValue = e.currentTarget.checked\r\n         tasks.updateTask(task.id, todolistId, {\r\n            status: newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New,\r\n         })\r\n      },\r\n      [task.id, todolistId]\r\n   )\r\n\r\n   const onTitleChangeHandler = useCallback(\r\n      (newValue: string) => {\r\n         tasks.updateTask(task.id, todolistId, { title: newValue })\r\n      },\r\n      [task.id, todolistId]\r\n   )\r\n\r\n   return (\r\n      <div key={task.id} className={task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n         <Checkbox\r\n            checked={task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n         />\r\n         <EditableSpan value={task.title} onChange={onTitleChangeHandler} />\r\n         <IconButton onClick={removeTaskHandler}>\r\n            <Delete />\r\n         </IconButton>\r\n      </div>\r\n   )\r\n})\r\n","import { flow, makeAutoObservable } from 'mobx'\r\nimport { todolistsAPI } from '../api/todolists-api'\r\nimport init from './init'\r\nimport { handleServerNetworkError } from '../common/utils/error-utils'\r\nimport tasks from './tasks'\r\nimport {\r\n   FilterValuesType,\r\n   RequestStatusType,\r\n   TodolistDomainType,\r\n   TodolistType,\r\n} from '../common/types/types'\r\n\r\nclass Todolists {\r\n   todos: TodolistDomainType[] = []\r\n   constructor() {\r\n      makeAutoObservable(this)\r\n   }\r\n   changeTodolistFilter(id: string, filter: FilterValuesType) {\r\n      const index = this.todos.findIndex(tl => tl.id === id)\r\n      this.todos[index].filter = filter\r\n   }\r\n   changeTodolistEntityStatus(id: string, status: RequestStatusType) {\r\n      const index = this.todos.findIndex(tl => tl.id === id)\r\n      this.todos[index].entityStatus = status\r\n   }\r\n   fetchTodolists = flow(function* (this: Todolists) {\r\n      init.setAppStatus('loading')\r\n      try {\r\n         const res = yield todolistsAPI.getTodolists()\r\n         init.setAppStatus('succeeded')\r\n         this.todos = res.data.map((tl: TodolistType) => ({\r\n            ...tl,\r\n            filter: 'all',\r\n            entityStatus: 'idle',\r\n         }))\r\n      } catch (err: any) {\r\n         handleServerNetworkError(err)\r\n      }\r\n   })\r\n   removeTodolist = flow(function* (this: Todolists, todolistId: string) {\r\n      init.setAppStatus('loading')\r\n      this.changeTodolistEntityStatus(todolistId, 'loading')\r\n      try {\r\n         yield todolistsAPI.deleteTodolist(todolistId)\r\n         init.setAppStatus('succeeded')\r\n         const index = this.todos.findIndex(tl => tl.id === todolistId)\r\n         if (index > -1) {\r\n            tasks.deleteTodolist(todolistId)\r\n            this.todos.splice(index, 1)\r\n         }\r\n      } catch (err: any) {\r\n         handleServerNetworkError(err)\r\n      }\r\n   })\r\n   addTodolist = flow(function* (this: Todolists, title: string) {\r\n      init.setAppStatus('loading')\r\n      try {\r\n         const res = yield todolistsAPI.createTodolist(title)\r\n         init.setAppStatus('succeeded')\r\n         this.todos.unshift({ ...res.data.data.item, filter: 'all', entityStatus: 'idle' })\r\n      } catch (err: any) {\r\n         handleServerNetworkError(err)\r\n      }\r\n   })\r\n   changeTodolistTitle = flow(function* (this: Todolists, id: string, title: string) {\r\n      this.changeTodolistEntityStatus(id, 'loading')\r\n      try {\r\n         yield todolistsAPI.updateTodolist(id, title)\r\n         this.changeTodolistEntityStatus(id, 'succeeded')\r\n         const index = this.todos.findIndex(tl => tl.id === id)\r\n         this.todos[index].title = title\r\n      } catch (err: any) {\r\n         handleServerNetworkError(err)\r\n      }\r\n   })\r\n}\r\nexport default new Todolists()\r\n","import React, { useCallback, useEffect } from 'react'\r\nimport { AddItemForm } from '../../../common/components/AddItemForm/AddItemForm'\r\nimport { EditableSpan } from '../../../common/components/EditableSpan/EditableSpan'\r\nimport { Button, IconButton } from '@material-ui/core'\r\nimport { Delete } from '@material-ui/icons'\r\nimport { Task } from './Task/Task'\r\nimport todolists from '../../../store/todolists'\r\nimport { observer } from 'mobx-react-lite'\r\nimport tasks from '../../../store/tasks'\r\nimport { FilterValuesType, TaskStatuses, TodolistComponentType } from '../../../common/types/types'\r\n\r\nexport const Todolist = observer(function ({ demo = false, todolist }: TodolistComponentType) {\r\n   const tasksData = tasks.tasksData[todolist.id]\r\n\r\n   useEffect(() => {\r\n      if (demo) {\r\n         return\r\n      }\r\n      tasks.fetchTasks(todolist.id)\r\n   }, [])\r\n\r\n   const addTask = useCallback(\r\n      (title: string) => {\r\n         tasks.addTask(title, todolist.id)\r\n      },\r\n      [todolist.id]\r\n   )\r\n\r\n   const removeTodolist = () => {\r\n      todolists.removeTodolist(todolist.id)\r\n   }\r\n   const changeTodolistTitle = useCallback(\r\n      (title: string) => {\r\n         todolists.changeTodolistTitle(todolist.id, title)\r\n      },\r\n      [todolist.id]\r\n   )\r\n\r\n   const changeFilterClickHandler = (filter: FilterValuesType) =>\r\n      todolists.changeTodolistFilter(todolist.id, filter)\r\n\r\n   let tasksForTodolist = tasksData\r\n\r\n   if (todolist.filter === 'active') {\r\n      tasksForTodolist = tasksData.filter(t => t.status === TaskStatuses.New)\r\n   }\r\n   if (todolist.filter === 'completed') {\r\n      tasksForTodolist = tasksData.filter(t => t.status === TaskStatuses.Completed)\r\n   }\r\n   return (\r\n      <div>\r\n         <h3>\r\n            <EditableSpan value={todolist.title} onChange={changeTodolistTitle} />\r\n            <IconButton onClick={removeTodolist} disabled={todolist.entityStatus === 'loading'}>\r\n               <Delete />\r\n            </IconButton>\r\n         </h3>\r\n         <AddItemForm\r\n            addItem={addTask}\r\n            disabled={todolist.entityStatus === 'loading'}\r\n            placeholder={'new Task'}\r\n         />\r\n         <div>\r\n            {tasksForTodolist &&\r\n               tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={todolist.id} />)}\r\n         </div>\r\n         <div style={{ paddingTop: '10px' }}>\r\n            <Button\r\n               variant={todolist.filter === 'all' ? 'outlined' : 'text'}\r\n               onClick={() => changeFilterClickHandler('all')}\r\n               color={'default'}\r\n            >\r\n               All\r\n            </Button>\r\n            <Button\r\n               variant={todolist.filter === 'active' ? 'outlined' : 'text'}\r\n               onClick={() => changeFilterClickHandler('active')}\r\n               color={'primary'}\r\n            >\r\n               Active\r\n            </Button>\r\n            <Button\r\n               variant={todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n               onClick={() => changeFilterClickHandler('completed')}\r\n               color={'secondary'}\r\n            >\r\n               Completed\r\n            </Button>\r\n         </div>\r\n      </div>\r\n   )\r\n})\r\n","import React, { useCallback, useEffect } from 'react'\r\nimport { Grid, Paper } from '@material-ui/core'\r\nimport { AddItemForm } from '../../common/components/AddItemForm/AddItemForm'\r\nimport { Todolist } from './Todolist/Todolist'\r\nimport { Redirect } from 'react-router-dom'\r\nimport { observer } from 'mobx-react-lite'\r\nimport auth from '../../store/auth'\r\nimport todolists from '../../store/todolists'\r\nimport { ComponentType } from '../../common/types/types'\r\nimport '../../app/App.css'\r\n\r\nexport const TodolistsList: React.FC<ComponentType> = observer(({ demo }) => {\r\n   const todolistsItems = todolists.todos\r\n   const isLoggedIn = auth.isLoggedIn\r\n\r\n   useEffect(() => {\r\n      if (demo || !isLoggedIn) return\r\n      todolists.fetchTodolists()\r\n   }, [demo, isLoggedIn])\r\n\r\n   const addTodolist = useCallback((title: string) => {\r\n      todolists.addTodolist(title)\r\n   }, [])\r\n\r\n   if (!isLoggedIn) {\r\n      return <Redirect to={'/login'} />\r\n   }\r\n   return (\r\n      <>\r\n         <Grid\r\n            container\r\n            style={{ margin: 20, width: 315, padding: 20 }}\r\n            className=\"formControl\"\r\n            justifyContent={'center'}\r\n         >\r\n            <AddItemForm addItem={addTodolist} placeholder={'new List'} />\r\n         </Grid>\r\n         <Grid container spacing={3} justifyContent={'center'}>\r\n            {todolistsItems.map(tl => (\r\n               <Grid item key={tl.id}>\r\n                  <Paper\r\n                     style={{\r\n                        padding: 10,\r\n                        backgroundColor: 'rgba(255, 255, 255, 0.9)',\r\n                        borderRadius: 15,\r\n                     }}\r\n                  >\r\n                     <Todolist todolist={tl} demo={demo} />\r\n                  </Paper>\r\n               </Grid>\r\n            ))}\r\n         </Grid>\r\n      </>\r\n   )\r\n})\r\n","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, { AlertProps } from '@material-ui/lab/Alert'\r\nimport init from '../../../store/init'\r\nimport { observer } from 'mobx-react-lite'\r\n\r\nfunction Alert(props: AlertProps) {\r\n   return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport const ErrorSnackbar = observer(function () {\r\n   const error = init.error\r\n   const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n      if (reason === 'clickaway') {\r\n         return\r\n      }\r\n      init.setAppError(null)\r\n   }\r\n\r\n   const isOpen = error !== null\r\n\r\n   return (\r\n      <Snackbar open={isOpen} autoHideDuration={6000} onClose={handleClose}>\r\n         <Alert onClose={handleClose} severity=\"error\">\r\n            {error}\r\n         </Alert>\r\n      </Snackbar>\r\n   )\r\n})\r\n","import React from 'react'\r\nimport {\r\n   Checkbox,\r\n   FormControl,\r\n   FormControlLabel,\r\n   FormGroup,\r\n   FormLabel,\r\n   TextField,\r\n   Button,\r\n   Grid,\r\n} from '@material-ui/core'\r\nimport { useFormik } from 'formik'\r\nimport { Redirect } from 'react-router-dom'\r\nimport auth from '../../store/auth'\r\nimport { observer } from 'mobx-react-lite'\r\nimport { FormValuesType } from '../../common/types/types'\r\nimport '../../app/App.css'\r\n\r\nexport const Login = observer(() => {\r\n   const isLoggedIn = auth.isLoggedIn\r\n\r\n   const formik = useFormik({\r\n      validate: values => {\r\n         if (!values.email) {\r\n            return {\r\n               email: 'Email is required',\r\n            }\r\n         }\r\n         if (!values.password) {\r\n            return {\r\n               password: 'Password is required',\r\n            }\r\n         }\r\n      },\r\n      initialValues: {\r\n         email: '',\r\n         password: '',\r\n         rememberMe: false,\r\n      },\r\n      onSubmit: (values: FormValuesType) => {\r\n         auth.logIn(values)\r\n      },\r\n   })\r\n\r\n   if (isLoggedIn) {\r\n      return <Redirect to={'/'} />\r\n   }\r\n\r\n   return (\r\n      <Grid container justifyContent=\"center\">\r\n         <Grid item xs={4}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n               <FormControl className=\"formControl\" style={{ padding: 20, marginTop: 20 }}>\r\n                  <FormLabel>\r\n                     <p>\r\n                        To log in get registered{' '}\r\n                        <a\r\n                           href={'https://social-network.samuraijs.com/'}\r\n                           target={'_blank'}\r\n                           rel=\"noreferrer\"\r\n                        >\r\n                           here\r\n                        </a>\r\n                     </p>\r\n                     <p>or use common test account credentials:</p>\r\n                     <p> Email: free@samuraijs.com</p>\r\n                     <p>Password: free</p>\r\n                  </FormLabel>\r\n                  <FormGroup>\r\n                     <TextField label=\"Email\" margin=\"normal\" {...formik.getFieldProps('email')} />\r\n                     {formik.errors.email ? (\r\n                        <div style={{ color: 'red' }}>{formik.errors.email}</div>\r\n                     ) : null}\r\n                     <TextField\r\n                        type=\"password\"\r\n                        label=\"Password\"\r\n                        margin=\"normal\"\r\n                        {...formik.getFieldProps('password')}\r\n                     />\r\n                     {formik.errors.password ? (\r\n                        <div style={{ color: 'red' }}>{formik.errors.password}</div>\r\n                     ) : null}\r\n                     <FormControlLabel\r\n                        label={'Remember me'}\r\n                        control={\r\n                           <Checkbox\r\n                              {...formik.getFieldProps('rememberMe')}\r\n                              checked={formik.values.rememberMe}\r\n                           />\r\n                        }\r\n                     />\r\n                     <Button\r\n                        type={'submit'}\r\n                        variant={'contained'}\r\n                        disabled={!formik.values.email || !formik.values.password}\r\n                        style={{\r\n                           backgroundColor:\r\n                              !formik.values.email || !formik.values.password\r\n                                 ? 'rgba(13, 114, 8, 0.2)'\r\n                                 : 'rgba(13, 114, 8, 0.8)',\r\n                        }}\r\n                     >\r\n                        Login\r\n                     </Button>\r\n                  </FormGroup>\r\n               </FormControl>\r\n            </form>\r\n         </Grid>\r\n      </Grid>\r\n   )\r\n})\r\n","import React, { useCallback, useEffect } from 'react'\r\nimport './App.css'\r\nimport {\r\n   AppBar,\r\n   Button,\r\n   CircularProgress,\r\n   Container,\r\n   LinearProgress,\r\n   Toolbar,\r\n   Typography,\r\n} from '@material-ui/core'\r\nimport { TodolistsList } from '../features/TodolistsList/TodolistsList'\r\nimport { ErrorSnackbar } from '../common/components/ErrorSnackbar/ErrorSnackbar'\r\nimport { Route } from 'react-router-dom'\r\nimport { Login } from '../features/Login/Login'\r\nimport init from '../store/init'\r\nimport auth from '../store/auth'\r\nimport { observer } from 'mobx-react-lite'\r\nimport { ComponentType } from '../common/types/types'\r\n\r\nconst App = observer(({ demo = false }: ComponentType) => {\r\n   const status = init.status\r\n   const isInitialized = init.isInitialized\r\n   const isLoggedIn = auth.isLoggedIn\r\n\r\n   useEffect(() => {\r\n      init.initializeApp()\r\n   }, [])\r\n\r\n   const logoutHandler = useCallback(() => {\r\n      auth.logOut()\r\n   }, [])\r\n\r\n   if (!isInitialized) {\r\n      return (\r\n         <div\r\n            style={{\r\n               position: 'fixed',\r\n               top: '30%',\r\n               textAlign: 'center',\r\n               width: '100%',\r\n            }}\r\n         >\r\n            <CircularProgress />\r\n         </div>\r\n      )\r\n   }\r\n\r\n   return (\r\n      <div className=\"App\">\r\n         <ErrorSnackbar />\r\n         <AppBar position=\"static\" style={{ background: 'rgba(13, 114, 8, 0.8)' }}>\r\n            <Toolbar>\r\n               <Typography variant=\"h6\">Todolists</Typography>\r\n               {isLoggedIn && (\r\n                  <Button\r\n                     color=\"inherit\"\r\n                     onClick={logoutHandler}\r\n                     style={{ right: 20, position: 'absolute' }}\r\n                  >\r\n                     Log out\r\n                  </Button>\r\n               )}\r\n            </Toolbar>\r\n            <div className=\"progress\">{status === 'loading' && <LinearProgress />}</div>\r\n         </AppBar>\r\n         <Container>\r\n            <Route exact path={'/'} render={() => <TodolistsList demo={demo} />} />\r\n            <Route path={'/login'} render={() => <Login />} />\r\n         </Container>\r\n      </div>\r\n   )\r\n})\r\nexport default App\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport * as serviceWorker from './serviceWorker'\r\nimport App from './app/App'\r\nimport { BrowserRouter as Router, HashRouter } from 'react-router-dom'\r\n\r\nReactDOM.render(\r\n   <HashRouter>\r\n      <App />\r\n   </HashRouter>,\r\n\r\n   document.getElementById('root')\r\n)\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n"],"sourceRoot":""}