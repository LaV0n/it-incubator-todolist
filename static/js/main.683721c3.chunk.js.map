{"version":3,"sources":["serviceWorker.ts","api/todolists-api.ts","utils/error-utils.ts","features/Login/auth-reducer.ts","app/app-reducer.ts","features/TodolistsList/todolists-reducer.ts","features/TodolistsList/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","app/store.ts","features/Login/Login.tsx","app/App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","taskTitile","model","authAPI","data","handleServerAppError","dispatch","messages","length","setAppErrorAC","error","setAppStatusAC","status","handleServerNetworkError","message","slice","createSlice","name","initialState","isLoggedIn","reducers","setIsLoggedInAC","state","action","payload","value","extraReducers","builder","addCase","loginTC","fulfilled","logoutTC","authReducer","reducer","actions","createAsyncThunk","param","thunkAPI","res","resultCode","rejectWithValue","errors","arg","isInitialized","initializeAppTC","appReducer","changeTodolistFilterAC","index","findIndex","tl","filter","changeTodolistEntityStatusAC","entityStatus","fetchTodolistsTC","todolists","map","removeTodolistTC","splice","addTodolistTC","unshift","todolist","changeTodolistTitleTC","todolistsReducer","item","params","tasksReducer","forEach","fetchTasksTC","tasks","removeTaskTC","t","addTaskTC","todoListId","updateTaskTC","domainModel","items","getState","task","find","apiModel","deadline","description","priority","startDate","AddItemForm","React","memo","addItem","disabled","console","log","useState","setTitle","setError","addItemHandler","trim","TextField","variant","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","props","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","onClickHandler","useCallback","removeTask","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","key","className","Checkbox","Delete","Todolist","demo","useDispatch","useEffect","thunk","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","removeTodolist","style","paddingTop","Button","TodolistsList","useSelector","auth","changeStatus","newTitle","addTodolist","Grid","container","padding","spacing","allTodolistTasks","Paper","to","Alert","elevation","ErrorSnackbar","app","handleClose","event","reason","isOpen","Snackbar","open","autoHideDuration","onClose","severity","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","thunkMiddleware","Login","formik","useFormik","validate","values","email","password","initialValues","rememberMe","onSubmit","formikHelpers","type","rejected","justify","xs","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","getFieldProps","FormControlLabel","control","App","logoutHandler","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","exact","path","render","top","textAlign","width","CircularProgress","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.683721c3.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from 'axios'\r\n\r\nconst settings = {\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '45599275-fc7c-4215-aaa5-a9a36d291e1f'\r\n    }\r\n}\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    ...settings\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        const promise = instance.get<TodolistType[]>('todo-lists');\r\n        return promise;\r\n    },\r\n    createTodolist(title: string) {\r\n        const promise = instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', {title: title});\r\n        return promise;\r\n    },\r\n    deleteTodolist(id: string) {\r\n        const promise = instance.delete<ResponseType>(`todo-lists/${id}`);\r\n        return promise;\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        const promise = instance.put<ResponseType>(`todo-lists/${id}`, {title: title});\r\n        return promise;\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, taskTitile: string) {\r\n        return instance.post<ResponseType<{ item: TaskType}>>(`todo-lists/${todolistId}/tasks`, {title: taskTitile});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\n\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\n\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n        const promise = instance.post<ResponseType<{userId?: number}>>('auth/login', data);\r\n        return promise;\r\n    },\r\n    logout() {\r\n        const promise = instance.delete<ResponseType<{userId?: number}>>('auth/login');\r\n        return promise;\r\n    },\r\n    me() {\r\n       const promise =  instance.get<ResponseType<{id: number; email: string; login: string}>>('auth/me');\r\n       return promise\r\n    }\r\n}\r\n\r\n// types\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n}\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n","import {setAppErrorAC,  setAppStatusAC} from '../app/app-reducer'\r\nimport {ResponseType} from '../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\n\r\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: Dispatch) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC({error:data.messages[0]}))\r\n    } else {\r\n        dispatch(setAppErrorAC({error:'Some error occurred'}))\r\n    }\r\n    dispatch(setAppStatusAC({status:'failed'}))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: { message: string }, dispatch: Dispatch) => {\r\n    dispatch(setAppErrorAC({error: error.message ? error.message : 'Some error occurred'}))\r\n    dispatch(setAppStatusAC({status:'failed'}))\r\n}\r\n","import {setAppStatusAC} from '../../app/app-reducer'\r\nimport {authAPI, LoginParamsType} from '../../api/todolists-api'\r\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils'\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\n\r\nconst slice = createSlice({\r\n    name: 'auth',\r\n    initialState: initialState,\r\n    reducers: {\r\n        setIsLoggedInAC(state, action: PayloadAction<{ value: boolean }>) {\r\n            state.isLoggedIn = action.payload.value\r\n        }\r\n    },\r\n    extraReducers: builder => {\r\n        builder.addCase(loginTC.fulfilled, (state, action) => {\r\n            state.isLoggedIn = true\r\n        })\r\n        builder.addCase(logoutTC.fulfilled, (state, action) => {\r\n            state.isLoggedIn = false\r\n        })\r\n    }\r\n})\r\n\r\n\r\nexport const authReducer = slice.reducer\r\nexport const {setIsLoggedInAC} = slice.actions\r\n\r\n\r\n// thunks\r\n\r\nexport const loginTC = createAsyncThunk\r\n('auth/login', async (param:LoginParamsType, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\r\n    try {\r\n        const res = await authAPI.login(param)\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            return\r\n        } else {\r\n            handleServerAppError(res.data, thunkAPI.dispatch)\r\n            return thunkAPI.rejectWithValue({errors: res.data.messages})\r\n        }\r\n    } catch (err: any) {\r\n        handleServerNetworkError(err, thunkAPI.dispatch)\r\n        return {isLoggedIn: true}\r\n    }\r\n})\r\nexport const logoutTC = createAsyncThunk('auth/logout', async (arg, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\r\n    try {\r\n        const res = await authAPI.logout()\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            return\r\n        } else {\r\n            handleServerAppError(res.data, thunkAPI.dispatch)\r\n            return thunkAPI.rejectWithValue({})\r\n        }\r\n    } catch (err: any) {\r\n        handleServerNetworkError(err, thunkAPI.dispatch)\r\n        return thunkAPI.rejectWithValue({})\r\n    }\r\n})\r\n\r\n","import {authAPI} from '../api/todolists-api'\r\nimport {setIsLoggedInAC} from '../features/Login/auth-reducer'\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState:InitialStateType = {\r\n    status: 'idle',\r\n    error: null,\r\n    isInitialized: false\r\n}\r\nexport type InitialStateType = {\r\n    status: RequestStatusType\r\n    error: string | null\r\n    isInitialized: boolean\r\n}\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\nconst slice=createSlice({\r\n    name:'app',\r\n    initialState:initialState,\r\n    reducers:{\r\n        setAppErrorAC(state,action:PayloadAction<{error: string | null}>){\r\n            state.error=action.payload.error\r\n        },\r\n        setAppStatusAC(state,action:PayloadAction<{status: RequestStatusType}>){\r\n            state.status=action.payload.status\r\n        }\r\n    },\r\n    extraReducers:builder => {\r\n        builder.addCase(initializeAppTC.fulfilled,(state)=>{\r\n            state.isInitialized=true\r\n        })\r\n    }\r\n})\r\n\r\nexport const appReducer =slice.reducer\r\nexport const {setAppErrorAC,setAppStatusAC}=slice.actions\r\n\r\nexport const initializeAppTC =createAsyncThunk('app/initialize',async (arg, {dispatch})=>{\r\n    const res= await authAPI.me()\r\n    if (res.data.resultCode === 0) {\r\n        dispatch(setIsLoggedInAC({value:true}));\r\n    } else {  }\r\n    return\r\n})\r\n","import {todolistsAPI, TodolistType} from '../../api/todolists-api'\r\nimport {RequestStatusType, setAppStatusAC} from '../../app/app-reducer'\r\nimport {handleServerNetworkError} from '../../utils/error-utils'\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nconst slice = createSlice({\r\n    name: 'todolists',\r\n    initialState: initialState,\r\n    reducers: {\r\n        changeTodolistFilterAC(state, action: PayloadAction<{ id: string, filter: FilterValuesType }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            state[index].filter = action.payload.filter\r\n        },\r\n        changeTodolistEntityStatusAC(state, action: PayloadAction<{ id: string, status: RequestStatusType }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            state[index].entityStatus = action.payload.status\r\n        }\r\n    },\r\n    extraReducers:builder => {\r\n        builder.addCase(fetchTodolistsTC.fulfilled, (state, action)=>{\r\n           return  action.payload.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        })\r\n        builder.addCase(removeTodolistTC.fulfilled, (state, action)=>{\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            if (index > -1) {\r\n                state.splice(index, 1)\r\n            }\r\n        })\r\n        builder.addCase(addTodolistTC.fulfilled, (state, action)=>{\r\n            state.unshift({...action.payload.todolist, filter: 'all', entityStatus: 'idle'})\r\n        })\r\n        builder.addCase(changeTodolistTitleTC.fulfilled, (state, action)=>{\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            state[index].title = action.payload.title\r\n        })\r\n    }\r\n})\r\n\r\nexport const todolistsReducer = slice.reducer\r\nexport const { changeTodolistFilterAC,changeTodolistEntityStatusAC}= slice.actions\r\n\r\n// thunks\r\n\r\nexport const fetchTodolistsTC =createAsyncThunk('todolists/fetchTodolists',async (arg, thunkAPI)=> {\r\n    thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\r\n    try {\r\n        const res = await todolistsAPI.getTodolists()\r\n        thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}))\r\n        return {todolists: res.data}\r\n    } catch (error: any) {\r\n        handleServerNetworkError(error, thunkAPI.dispatch);\r\n        return thunkAPI.rejectWithValue({})\r\n    }\r\n})\r\n\r\nexport const removeTodolistTC =createAsyncThunk('todolists/removeTodolist',async (todolistId: string, thunkAPI)=> {\r\n    thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\r\n    thunkAPI.dispatch(changeTodolistEntityStatusAC({id: todolistId, status: 'loading'}))\r\n    await todolistsAPI.deleteTodolist(todolistId)\r\n    try {\r\n        thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}))\r\n        return {id: todolistId}\r\n    } catch (error: any) {\r\n        handleServerNetworkError(error, thunkAPI.dispatch);\r\n        return thunkAPI.rejectWithValue({})\r\n    }\r\n})\r\n\r\nexport const addTodolistTC =createAsyncThunk('todolists/addTodolist',async (title: string, thunkAPI)=> {\r\n    thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\r\n    const res = await todolistsAPI.createTodolist(title)\r\n    try {\r\n        thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}))\r\n        return {todolist: res.data.data.item}\r\n    } catch (error: any) {\r\n        handleServerNetworkError(error, thunkAPI.dispatch);\r\n        return thunkAPI.rejectWithValue({})\r\n    }\r\n})\r\n\r\nexport const changeTodolistTitleTC =createAsyncThunk('todolists/changeTodolist',async (params:{id: string, title: string}, thunkAPI)=> {\r\n    thunkAPI.dispatch(changeTodolistEntityStatusAC({id:params.id, status: 'loading'}))\r\n    await todolistsAPI.updateTodolist(params.id, params.title)\r\n    try {\r\n        thunkAPI.dispatch(changeTodolistEntityStatusAC({id:params.id, status: 'succeeded'}))\r\n        return params\r\n    } catch (error: any) {\r\n        handleServerNetworkError(error, thunkAPI.dispatch);\r\n        return thunkAPI.rejectWithValue({})\r\n    }\r\n})\r\n\r\n// types\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\n\r\n","import {addTodolistTC, fetchTodolistsTC, removeTodolistTC} from './todolists-reducer'\r\nimport {TaskPriorities, TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType} from '../../api/todolists-api'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {setAppStatusAC} from '../../app/app-reducer'\r\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils'\r\nimport {createAsyncThunk, createSlice} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nconst slice = createSlice({\r\n    name: 'tasks',\r\n    initialState: initialState,\r\n    reducers: {},\r\n    extraReducers: (builder) => {\r\n        builder.addCase(addTodolistTC.fulfilled, (state, action) => {\r\n            state[action.payload.todolist.id] = []\r\n        })\r\n        builder.addCase(removeTodolistTC.fulfilled, (state, action) => {\r\n            delete state[action.payload.id]\r\n        })\r\n        builder.addCase(fetchTodolistsTC.fulfilled, (state, action) => {\r\n            action.payload.todolists.forEach(tl => {\r\n                state[tl.id] = []\r\n            })\r\n        })\r\n        builder.addCase(fetchTasksTC.fulfilled, (state, action) => {\r\n            state[action.payload.todolistId] = action.payload.tasks\r\n        })\r\n        builder.addCase(removeTaskTC.fulfilled, (state, action) => {\r\n            const tasks = state[action.payload.todolistId]\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n            if (index > -1) {\r\n                tasks.splice(index, 1)\r\n            }\r\n        })\r\n        builder.addCase(addTaskTC.fulfilled, (state, action) => {\r\n            state[action.payload.todoListId].unshift(action.payload)\r\n        })\r\n        builder.addCase(updateTaskTC.fulfilled, (state, action) => {\r\n            const tasks = state[action.payload.todolistId]\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n            if (index > -1) {\r\n                tasks[index] = {...tasks[index], ...action.payload.domainModel}\r\n            }\r\n        })\r\n    }\r\n})\r\n\r\nexport const tasksReducer = slice.reducer\r\n\r\n// thunks\r\nexport const fetchTasksTC = createAsyncThunk('tasks/fetchTasks', async (todolistId: string, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\r\n    const res = await todolistsAPI.getTasks(todolistId)\r\n    const tasks = res.data.items\r\n    thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}))\r\n    return {tasks, todolistId}\r\n})\r\nexport const removeTaskTC = createAsyncThunk('tasks/removeTask', async (param: { taskId: string, todolistId: string }, thunkAPI) => {\r\n    await todolistsAPI.deleteTask(param.todolistId, param.taskId)\r\n    return {taskId: param.taskId, todolistId: param.todolistId}\r\n})\r\n\r\nexport const addTaskTC = createAsyncThunk('task/addTask', async (param: { title: string, todolistId: string }, {\r\n    dispatch,\r\n    rejectWithValue\r\n}) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    try {\r\n        const res = await todolistsAPI.createTask(param.todolistId, param.title)\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            return res.data.data.item\r\n        } else {\r\n            handleServerAppError(res.data, dispatch);\r\n            return rejectWithValue({})\r\n        }\r\n    } catch (error: any) {\r\n        handleServerNetworkError(error, dispatch)\r\n        return rejectWithValue({})\r\n    }\r\n})\r\n\r\nexport const updateTaskTC = createAsyncThunk('task/updateTask', async (param: { taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string }, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\r\n    const state = thunkAPI.getState() as AppRootStateType\r\n    const task = state.tasks[param.todolistId].find(t => t.id === param.taskId)\r\n    if (!task) {\r\n        return thunkAPI.rejectWithValue('task not found in the state')\r\n    }\r\n\r\n    const apiModel: UpdateTaskModelType = {\r\n        deadline: task.deadline,\r\n        description: task.description,\r\n        priority: task.priority,\r\n        startDate: task.startDate,\r\n        title: task.title,\r\n        status: task.status,\r\n        ...param.domainModel\r\n    }\r\n\r\n    const res = await todolistsAPI.updateTask(param.todolistId, param.taskId, apiModel)\r\n    try {\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}))\r\n        return param\r\n        } else {\r\n            handleServerAppError(res.data, thunkAPI.dispatch);\r\n            return thunkAPI.rejectWithValue({})\r\n        }\r\n\r\n    } catch (error: any) {\r\n        handleServerNetworkError(error, thunkAPI.dispatch)\r\n        return thunkAPI.rejectWithValue({})\r\n    }\r\n})\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport { IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function({addItem, disabled = false}: AddItemFormPropsType) {\r\n    console.log(\"AddItemForm called\")\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== \"\") {\r\n            addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItemHandler();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   disabled={disabled}\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled}>\r\n            <AddBox />\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    console.log(\"EditableSpan called\");\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ?    <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode} />\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton} from '@material-ui/core'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm} from '../../../components/AddItemForm/AddItemForm'\r\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan'\r\nimport {Button, IconButton} from '@material-ui/core'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {Task} from './Task/Task'\r\nimport {TaskStatuses, TaskType} from '../../../api/todolists-api'\r\nimport {FilterValuesType, TodolistDomainType} from '../todolists-reducer'\r\nimport {useDispatch} from 'react-redux'\r\nimport {fetchTasksTC} from '../tasks-reducer'\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    demo?: boolean\r\n}\r\n\r\nexport const Todolist = React.memo(function ({demo = false, ...props}: PropsType) {\r\n    console.log('Todolist called')\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return\r\n        }\r\n        const thunk = fetchTasksTC(props.todolist.id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todolist.id)\r\n    }, [props.addTask, props.todolist.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.todolist.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.todolist.id, title)\r\n    }, [props.todolist.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.todolist.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.todolist.entityStatus === 'loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === 'loading'}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.todolist.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'default'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from './todolists-reducer'\r\nimport {addTaskTC, removeTaskTC, TasksStateType, updateTaskTC} from './tasks-reducer'\r\nimport {TaskStatuses} from '../../api/todolists-api'\r\nimport {Grid, Paper} from '@material-ui/core'\r\nimport {AddItemForm} from '../../components/AddItemForm/AddItemForm'\r\nimport {Todolist} from './Todolist/Todolist'\r\nimport { Redirect } from 'react-router-dom'\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistsList: React.FC<PropsType> = ({demo = false}) => {\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (demo || !isLoggedIn) {\r\n            return;\r\n        }\r\n        const thunk = fetchTodolistsTC()\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const removeTask = useCallback(function (taskId: string, todolistId: string) {\r\n        const thunk = removeTaskTC({taskId, todolistId})\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const thunk = addTaskTC({title, todolistId})\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        const thunk = updateTaskTC({taskId:id, domainModel:{status}, todolistId:todolistId})\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        const thunk = updateTaskTC({taskId:id, domainModel:{title: newTitle}, todolistId:todolistId})\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC({id:todolistId, filter:value})\r\n        dispatch(action)\r\n    }, [])\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const thunk = removeTodolistTC(id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const thunk = changeTodolistTitleTC({id, title})\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const thunk = addTodolistTC(title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={\"/login\"} />\r\n    }\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: '10px'}}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                                demo={demo}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {setAppErrorAC} from '../../app/app-reducer'\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n    //const [open, setOpen] = React.useState(true)\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error);\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        dispatch(setAppErrorAC({error:null}));\r\n    }\r\n\r\n\r\n    const isOpen = error !== null;\r\n\r\n    return (\r\n        <Snackbar open={isOpen} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n","import {tasksReducer} from '../features/TodolistsList/tasks-reducer';\r\nimport {todolistsReducer} from '../features/TodolistsList/todolists-reducer';\r\nimport { combineReducers} from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {appReducer} from './app-reducer'\r\nimport {authReducer} from '../features/Login/auth-reducer'\r\nimport {configureStore} from \"@reduxjs/toolkit\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n// непосредственно создаём store\r\n//export const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n\r\nexport const store = configureStore({\r\n        reducer: rootReducer,\r\n        middleware: getDefaultMiddleware => getDefaultMiddleware().prepend(thunkMiddleware)\r\n    }\r\n)\r\nexport type RootReducerType=typeof rootReducer;\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\nexport const useAppDispatch =()=>useDispatch<typeof store.dispatch>()\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react'\r\nimport {Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, TextField, Button, Grid} from '@material-ui/core'\r\nimport {FormikHelpers, useFormik} from 'formik'\r\nimport { useSelector} from 'react-redux'\r\nimport {loginTC} from './auth-reducer'\r\nimport {AppRootStateType, useAppDispatch} from '../../app/store'\r\nimport {Redirect} from 'react-router-dom'\r\n\r\ntype FormValuesType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\n\r\nexport const Login = () => {\r\n    const dispatch = useAppDispatch()\r\n\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn);\r\n\r\n    const formik = useFormik({\r\n        validate: (values) => {\r\n            if (!values.email) {\r\n                return {\r\n                    email: 'Email is required'\r\n                }\r\n            }\r\n            if (!values.password) {\r\n                return {\r\n                    password: 'Password is required'\r\n                }\r\n            }\r\n\r\n        },\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        onSubmit: async (values: FormValuesType, formikHelpers: FormikHelpers<FormValuesType>) => {\r\n            const res = await dispatch(loginTC(values));\r\n            if (res.type === loginTC.rejected.type) {/*\r\n                if (res.payload.fieldErrors) {\r\n                    formikHelpers.setFieldError('email', 'ERROR')\r\n                }*/\r\n            }\r\n\r\n        },\r\n    })\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect to={\"/\"}/>\r\n    }\r\n\r\n\r\n    return <Grid container justify=\"center\">\r\n        <Grid item xs={4}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>\r\n                            To log in get registered <a href={'https://social-network.samuraijs.com/'}\r\n                                                        target={'_blank'}>here</a>\r\n                        </p>\r\n                        <p>\r\n                            or use common test account credentials:\r\n                        </p>\r\n                        <p> Email: free@samuraijs.com\r\n                        </p>\r\n                        <p>\r\n                            Password: free\r\n                        </p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps(\"email\")}\r\n                        />\r\n                        {formik.errors.email ? <div>{formik.errors.email}</div> : null}\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps(\"password\")}\r\n                        />\r\n                        {formik.errors.password ? <div>{formik.errors.password}</div> : null}\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox\r\n                                {...formik.getFieldProps(\"rememberMe\")}\r\n                                checked={formik.values.rememberMe}\r\n                            />}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport './App.css'\r\nimport {\r\n    AppBar,\r\n    Button,\r\n    CircularProgress,\r\n    Container,\r\n    IconButton,\r\n    LinearProgress,\r\n    Toolbar,\r\n    Typography\r\n} from '@material-ui/core'\r\nimport {Menu} from '@material-ui/icons'\r\nimport {TodolistsList} from '../features/TodolistsList/TodolistsList'\r\nimport {ErrorSnackbar} from '../components/ErrorSnackbar/ErrorSnackbar'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from './store'\r\nimport {initializeAppTC, RequestStatusType} from './app-reducer'\r\nimport { Route} from 'react-router-dom'\r\nimport {Login} from '../features/Login/Login'\r\nimport {logoutTC} from '../features/Login/auth-reducer'\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nfunction App({demo = false}: PropsType) {\r\n    const status = useSelector<AppRootStateType, RequestStatusType>((state) => state.app.status)\r\n    const isInitialized = useSelector<AppRootStateType, boolean>((state) => state.app.isInitialized)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [])\r\n\r\n    const logoutHandler = useCallback(() => {\r\n        dispatch(logoutTC())\r\n    }, [])\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n    return (\r\n            <div className=\"App\">\r\n                <ErrorSnackbar/>\r\n                <AppBar position=\"static\">\r\n                    <Toolbar>\r\n                        <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                            <Menu/>\r\n                        </IconButton>\r\n                        <Typography variant=\"h6\">\r\n                            News\r\n                        </Typography>\r\n                        {isLoggedIn && <Button color=\"inherit\" onClick={logoutHandler}>Log out</Button>}\r\n                    </Toolbar>\r\n                    {status === 'loading' && <LinearProgress/>}\r\n                </AppBar>\r\n                <Container fixed>\r\n                    <Route exact path={'/'} render={() => <TodolistsList demo={demo}/>}/>\r\n                    <Route path={'/login'} render={() => <Login/>}/>\r\n                </Container>\r\n            </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from './app/App';\r\nimport {store} from './app/store';\r\nimport {Provider} from 'react-redux';\r\nimport {BrowserRouter as Router, HashRouter} from 'react-router-dom'\r\n\r\nReactDOM.render(\r\n    <HashRouter>\r\n        <Provider store={store}>\r\n            <App/>\r\n        </Provider>\r\n    </HashRouter>\r\n    , document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}