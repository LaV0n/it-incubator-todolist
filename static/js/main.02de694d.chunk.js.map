{"version":3,"sources":["serviceWorker.tsx","common/components/AddItemForm/AddItemForm.tsx","common/components/EditableSpan/EditableSpan.tsx","api/todolists-api.ts","common/utils/error-utils.ts","store/todolists.ts","store/auth.ts","store/init.ts","common/types/types.ts","store/tasks.ts","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","common/components/ErrorSnackbar/ErrorSnackbar.tsx","features/Login/Login.tsx","app/App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","AddItemForm","React","memo","addItem","placeholder","disabled","useState","title","setTitle","error","setError","addItemHandler","trim","TextField","variant","value","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","props","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","post","id","delete","put","todolistId","taskId","taskTitile","model","authAPI","data","handleServerAppError","messages","length","init","setAppError","setAppStatus","handleServerNetworkError","message","todos","fetchTodolists","flow","res","this","map","tl","filter","entityStatus","removeTodolist","changeTodolistEntityStatus","index","findIndex","tasks","deleteTodolist","splice","addTodolist","unshift","item","changeTodolistTitle","makeAutoObservable","clearAllTasks","status","isLoggedIn","logIn","param","resultCode","logOut","todolists","clearAllTodolists","isInitialized","initializeApp","auth","setIsLoggedIn","TaskStatuses","TaskPriorities","tasksData","fetchTasks","items","removeTask","t","addTask","updateTask","domainModel","task","find","console","apiModel","deadline","description","priority","startDate","Task","removeTaskHandler","useCallback","onChangeHandler","newIsDoneValue","checked","Completed","New","onTitleChangeHandler","newValue","key","className","Checkbox","Delete","Todolist","observer","demo","todolist","useEffect","changeFilterClickHandler","changeTodolistFilter","tasksForTodolist","style","paddingTop","Button","TodolistsList","todolistsItems","Grid","container","margin","width","padding","justifyContent","spacing","Paper","backgroundColor","borderRadius","to","Alert","elevation","ErrorSnackbar","handleClose","event","reason","isOpen","Snackbar","open","autoHideDuration","onClose","severity","Login","formik","useFormik","validate","values","email","password","initialValues","rememberMe","onSubmit","xs","handleSubmit","FormControl","marginTop","FormLabel","href","target","rel","FormGroup","getFieldProps","errors","type","FormControlLabel","control","App","logoutHandler","AppBar","position","background","Toolbar","Typography","right","LinearProgress","Container","exact","path","render","top","textAlign","CircularProgress","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.02de694d.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n   window.location.hostname === 'localhost' ||\n      // [::1] is the IPv6 localhost address.\n      window.location.hostname === '[::1]' ||\n      // 127.0.0.0/8 are considered localhost for IPv4.\n      window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n)\n\ntype Config = {\n   onSuccess?: (registration: ServiceWorkerRegistration) => void\n   onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n   if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n      // The URL constructor is available in all browsers that support SW.\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n      if (publicUrl.origin !== window.location.origin) {\n         // Our service worker won't work if PUBLIC_URL is on a different origin\n         // from what our page is served on. This might happen if a CDN is used to\n         // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n         return\n      }\n\n      window.addEventListener('load', () => {\n         const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n         if (isLocalhost) {\n            // This is running on localhost. Let's check if a service worker still exists or not.\n            checkValidServiceWorker(swUrl, config)\n\n            // Add some additional logging to localhost, pointing developers to the\n            // service worker/PWA documentation.\n            navigator.serviceWorker.ready.then(() => {\n               console.log(\n                  'This web app is being served cache-first by a service ' +\n                     'worker. To learn more, visit https://bit.ly/CRA-PWA'\n               )\n            })\n         } else {\n            // Is not localhost. Just register service worker\n            registerValidSW(swUrl, config)\n         }\n      })\n   }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n   navigator.serviceWorker\n      .register(swUrl)\n      .then(registration => {\n         registration.onupdatefound = () => {\n            const installingWorker = registration.installing\n            if (installingWorker == null) {\n               return\n            }\n            installingWorker.onstatechange = () => {\n               if (installingWorker.state === 'installed') {\n                  if (navigator.serviceWorker.controller) {\n                     // At this point, the updated precached content has been fetched,\n                     // but the previous service worker will still serve the older\n                     // content until all client tabs are closed.\n                     console.log(\n                        'New content is available and will be used when all ' +\n                           'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                     )\n\n                     // Execute callback\n                     if (config && config.onUpdate) {\n                        config.onUpdate(registration)\n                     }\n                  } else {\n                     // At this point, everything has been precached.\n                     // It's the perfect time to display a\n                     // \"Content is cached for offline use.\" message.\n                     console.log('Content is cached for offline use.')\n\n                     // Execute callback\n                     if (config && config.onSuccess) {\n                        config.onSuccess(registration)\n                     }\n                  }\n               }\n            }\n         }\n      })\n      .catch(error => {\n         console.error('Error during service worker registration:', error)\n      })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n   // Check if the service worker can be found. If it can't reload the page.\n   fetch(swUrl, {\n      headers: { 'Service-Worker': 'script' },\n   })\n      .then(response => {\n         // Ensure service worker exists, and that we really are getting a JS file.\n         const contentType = response.headers.get('content-type')\n         if (\n            response.status === 404 ||\n            (contentType != null && contentType.indexOf('javascript') === -1)\n         ) {\n            // No service worker found. Probably a different app. Reload the page.\n            navigator.serviceWorker.ready.then(registration => {\n               registration.unregister().then(() => {\n                  window.location.reload()\n               })\n            })\n         } else {\n            // Service worker found. Proceed as normal.\n            registerValidSW(swUrl, config)\n         }\n      })\n      .catch(() => {\n         console.log('No internet connection found. App is running in offline mode.')\n      })\n}\n\nexport function unregister() {\n   if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.ready\n         .then(registration => {\n            registration.unregister()\n         })\n         .catch(error => {\n            console.error(error.message)\n         })\n   }\n}\n","import React, { ChangeEvent, KeyboardEvent, useState } from 'react'\r\nimport { IconButton, TextField } from '@material-ui/core'\r\nimport { AddBox } from '@material-ui/icons'\r\nimport { AddItemFormPropsType } from '../../types/types'\r\n\r\nexport const AddItemForm = React.memo(function ({\r\n   addItem,\r\n   placeholder,\r\n   disabled = false,\r\n}: AddItemFormPropsType) {\r\n   const [title, setTitle] = useState('')\r\n   const [error, setError] = useState<string | null>(null)\r\n\r\n   const addItemHandler = () => {\r\n      if (title.trim() !== '') {\r\n         addItem(title)\r\n         setTitle('')\r\n      } else {\r\n         setError('Title is required')\r\n      }\r\n   }\r\n\r\n   const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n      setTitle(e.currentTarget.value)\r\n   }\r\n\r\n   const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n      if (error !== null) {\r\n         setError(null)\r\n      }\r\n      if (e.charCode === 13) {\r\n         addItemHandler()\r\n      }\r\n   }\r\n\r\n   return (\r\n      <div>\r\n         <TextField\r\n            variant=\"outlined\"\r\n            disabled={disabled}\r\n            error={!!error}\r\n            value={title}\r\n            onChange={onChangeHandler}\r\n            onKeyPress={onKeyPressHandler}\r\n            label={placeholder}\r\n            helperText={error}\r\n         />\r\n         <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled}>\r\n            <AddBox />\r\n         </IconButton>\r\n      </div>\r\n   )\r\n})\r\n","import React, { ChangeEvent, useState } from 'react'\r\nimport { TextField } from '@material-ui/core'\r\nimport { EditableSpanPropsType } from '../../types/types'\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n   const [editMode, setEditMode] = useState(false)\r\n   const [title, setTitle] = useState(props.value)\r\n\r\n   const activateEditMode = () => {\r\n      setEditMode(true)\r\n      setTitle(props.value)\r\n   }\r\n   const activateViewMode = () => {\r\n      setEditMode(false)\r\n      props.onChange(title)\r\n   }\r\n   const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n      setTitle(e.currentTarget.value)\r\n   }\r\n\r\n   return editMode ? (\r\n      <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode} />\r\n   ) : (\r\n      <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n   )\r\n})\r\n","import axios from 'axios'\nimport {\n   GetTasksResponse,\n   TodolistType,\n   UpdateTaskModelType,\n   ResponseType,\n} from '../common/types/types'\nimport { LoginParamsType, TaskType } from '../common/types/types'\n\nconst settings = {\n   withCredentials: true,\n   headers: {\n      'API-KEY': '45599275-fc7c-4215-aaa5-a9a36d291e1f',\n   },\n}\nexport const instance = axios.create({\n   baseURL: 'https://social-network.samuraijs.com/api/1.1/',\n   ...settings,\n})\n\n// api\nexport const todolistsAPI = {\n   getTodolists() {\n      return instance.get<TodolistType[]>('todo-lists')\n   },\n   createTodolist(title: string) {\n      return instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', { title: title })\n   },\n   deleteTodolist(id: string) {\n      return instance.delete<ResponseType>(`todo-lists/${id}`)\n   },\n   updateTodolist(id: string, title: string) {\n      return instance.put<ResponseType>(`todo-lists/${id}`, { title: title })\n   },\n   getTasks(todolistId: string) {\n      return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`)\n   },\n   deleteTask(todolistId: string, taskId: string) {\n      return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`)\n   },\n   createTask(todolistId: string, taskTitile: string) {\n      return instance.post<ResponseType<{ item: TaskType }>>(`todo-lists/${todolistId}/tasks`, {\n         title: taskTitile,\n      })\n   },\n   updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\n      return instance.put<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model)\n   },\n}\n\nexport const authAPI = {\n   login(data: LoginParamsType) {\n      return instance.post<ResponseType<{ userId?: number }>>('auth/login', data)\n   },\n   logout() {\n      return instance.delete<ResponseType<{ userId?: number }>>('auth/login')\n   },\n   me() {\n      return instance.get<ResponseType<{ id: number; email: string; login: string }>>('auth/me')\n   },\n}\n","import init from '../../store/init'\r\nimport { ResponseType } from '../types/types'\r\n\r\nexport const handleServerAppError = <D>(data: ResponseType<D>) => {\r\n   if (data.messages.length) {\r\n      init.setAppError(data.messages[0])\r\n   } else {\r\n      init.setAppError('Some error occurred')\r\n   }\r\n   init.setAppStatus('failed')\r\n}\r\n\r\nexport const handleServerNetworkError = (error: { message: string }) => {\r\n   init.setAppError(error.message ? error.message : 'Some error occurred')\r\n   init.setAppStatus('failed')\r\n}\r\n","import { flow, makeAutoObservable } from 'mobx'\nimport { todolistsAPI } from '../api/todolists-api'\nimport init from './init'\nimport { handleServerNetworkError } from '../common/utils/error-utils'\nimport tasks from './tasks'\nimport {\n   FilterValuesType,\n   RequestStatusType,\n   TodolistDomainType,\n   TodolistType,\n} from '../common/types/types'\n\nclass Todolists {\n   todos: TodolistDomainType[] = []\n   constructor() {\n      makeAutoObservable(this)\n   }\n   clearAllTodolists() {\n      this.todos = []\n      tasks.clearAllTasks()\n   }\n   changeTodolistFilter(id: string, filter: FilterValuesType) {\n      const index = this.todos.findIndex(tl => tl.id === id)\n      this.todos[index].filter = filter\n   }\n   changeTodolistEntityStatus(id: string, status: RequestStatusType) {\n      const index = this.todos.findIndex(tl => tl.id === id)\n      this.todos[index].entityStatus = status\n   }\n   fetchTodolists = flow(function* (this: Todolists) {\n      init.setAppStatus('loading')\n      try {\n         const res = yield todolistsAPI.getTodolists()\n         init.setAppStatus('succeeded')\n         this.todos = res.data.map((tl: TodolistType) => ({\n            ...tl,\n            filter: 'all',\n            entityStatus: 'idle',\n         }))\n      } catch (err: any) {\n         handleServerNetworkError(err)\n      }\n   })\n   removeTodolist = flow(function* (this: Todolists, todolistId: string) {\n      init.setAppStatus('loading')\n      this.changeTodolistEntityStatus(todolistId, 'loading')\n      try {\n         yield todolistsAPI.deleteTodolist(todolistId)\n         init.setAppStatus('succeeded')\n         const index = this.todos.findIndex(tl => tl.id === todolistId)\n         if (index > -1) {\n            tasks.deleteTodolist(todolistId)\n            this.todos.splice(index, 1)\n         }\n      } catch (err: any) {\n         handleServerNetworkError(err)\n      }\n   })\n   addTodolist = flow(function* (this: Todolists, title: string) {\n      init.setAppStatus('loading')\n      try {\n         const res = yield todolistsAPI.createTodolist(title)\n         init.setAppStatus('succeeded')\n         this.todos.unshift({ ...res.data.data.item, filter: 'all', entityStatus: 'idle' })\n      } catch (err: any) {\n         handleServerNetworkError(err)\n      }\n   })\n   changeTodolistTitle = flow(function* (this: Todolists, id: string, title: string) {\n      this.changeTodolistEntityStatus(id, 'loading')\n      try {\n         yield todolistsAPI.updateTodolist(id, title)\n         this.changeTodolistEntityStatus(id, 'succeeded')\n         const index = this.todos.findIndex(tl => tl.id === id)\n         this.todos[index].title = title\n      } catch (err: any) {\n         handleServerNetworkError(err)\n      }\n   })\n}\nexport default new Todolists()\n","import { flow, makeAutoObservable } from 'mobx'\nimport init from './init'\nimport { authAPI } from '../api/todolists-api'\nimport { handleServerAppError, handleServerNetworkError } from '../common/utils/error-utils'\nimport { LoginParamsType } from '../common/types/types'\nimport todolists from './todolists'\n\nclass Auth {\n   isLoggedIn = false\n   constructor() {\n      makeAutoObservable(this)\n   }\n\n   setIsLoggedIn(value: boolean) {\n      this.isLoggedIn = value\n   }\n   logIn = flow(function* (this: Auth, param: LoginParamsType) {\n      init.setAppStatus('loading')\n\n      try {\n         const res = yield authAPI.login(param)\n         if (res.data.resultCode === 0) {\n            init.setAppStatus('succeeded')\n            this.isLoggedIn = true\n         } else {\n            handleServerAppError(res.data)\n         }\n      } catch (err: any) {\n         handleServerNetworkError(err)\n         init.setAppError('error')\n      }\n   })\n   logOut = flow(function* (this: Auth) {\n      init.setAppStatus('loading')\n      try {\n         const res = yield authAPI.logout()\n         if (res.data.resultCode === 0) {\n            init.setAppStatus('succeeded')\n            todolists.clearAllTodolists()\n            this.isLoggedIn = false\n         } else {\n            handleServerAppError(res.data)\n         }\n      } catch (err: any) {\n         handleServerNetworkError(err)\n      }\n   })\n}\nexport default new Auth()\n","import { flow, makeAutoObservable } from 'mobx'\r\nimport { authAPI } from '../api/todolists-api'\r\nimport auth from './auth'\r\nimport { RequestStatusType } from '../common/types/types'\r\n\r\nclass Init {\r\n   status: RequestStatusType = 'idle'\r\n   error: string | null = null\r\n   isInitialized = false\r\n   constructor() {\r\n      makeAutoObservable(this)\r\n   }\r\n   setAppError(error: string | null) {\r\n      this.error = error\r\n   }\r\n   setAppStatus(status: RequestStatusType) {\r\n      this.status = status\r\n   }\r\n   initializeApp = flow(function* (this: Init) {\r\n      try {\r\n         const res = yield authAPI.me()\r\n         if (res.data.resultCode === 0) {\r\n            this.isInitialized = true\r\n            auth.setIsLoggedIn(true)\r\n         }\r\n         if (res.data.resultCode === 1) {\r\n            this.isInitialized = true\r\n            auth.setIsLoggedIn(false)\r\n         }\r\n      } catch (err) {\r\n         this.error = 'error'\r\n      }\r\n   })\r\n}\r\nexport default new Init()\r\n","export type ComponentType = {\r\n   demo?: boolean\r\n}\r\nexport type LoginParamsType = {\r\n   email: string\r\n   password: string\r\n   rememberMe: boolean\r\n   captcha?: string\r\n}\r\nexport type TodolistType = {\r\n   id: string\r\n   title: string\r\n   addedDate: string\r\n   order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n   resultCode: number\r\n   messages: Array<string>\r\n   data: D\r\n}\r\nexport enum TaskStatuses {\r\n   New = 0,\r\n   InProgress = 1,\r\n   Completed = 2,\r\n   Draft = 3,\r\n}\r\nexport enum TaskPriorities {\r\n   Low = 0,\r\n   Middle = 1,\r\n   Hi = 2,\r\n   Urgently = 3,\r\n   Later = 4,\r\n}\r\nexport type TaskType = {\r\n   description: string\r\n   title: string\r\n   status: TaskStatuses\r\n   priority: TaskPriorities\r\n   startDate: string\r\n   deadline: string\r\n   id: string\r\n   todoListId: string\r\n   order: number\r\n   addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n   title: string\r\n   description: string\r\n   status: TaskStatuses\r\n   priority: TaskPriorities\r\n   startDate: string\r\n   deadline: string\r\n}\r\nexport type GetTasksResponse = {\r\n   error: string | null\r\n   totalCount: number\r\n   items: TaskType[]\r\n}\r\nexport type FormValuesType = {\r\n   email: string\r\n   password: string\r\n   rememberMe: boolean\r\n}\r\nexport type TodolistComponentType = {\r\n   todolist: TodolistDomainType\r\n   demo?: boolean\r\n}\r\nexport type TaskPropsType = {\r\n   task: TaskType\r\n   todolistId: string\r\n}\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type TasksStateType = {\r\n   [key: string]: Array<TaskType>\r\n}\r\nexport type UpdateDomainTaskModelType = {\r\n   title?: string\r\n   description?: string\r\n   status?: TaskStatuses\r\n   priority?: TaskPriorities\r\n   startDate?: string\r\n   deadline?: string\r\n}\r\nexport type FilterValuesType = 'all' | 'active' | 'completed'\r\nexport type TodolistDomainType = TodolistType & {\r\n   filter: FilterValuesType\r\n   entityStatus: RequestStatusType\r\n}\r\nexport type AddItemFormPropsType = {\r\n   addItem: (title: string) => void\r\n   disabled?: boolean\r\n   placeholder: string\r\n}\r\nexport type EditableSpanPropsType = {\r\n   value: string\r\n   onChange: (newValue: string) => void\r\n}\r\n","import { flow, makeAutoObservable } from 'mobx'\nimport { todolistsAPI } from '../api/todolists-api'\nimport init from './init'\nimport { handleServerAppError, handleServerNetworkError } from '../common/utils/error-utils'\nimport {\n   TasksStateType,\n   UpdateDomainTaskModelType,\n   UpdateTaskModelType,\n} from '../common/types/types'\n\nclass Tasks {\n   tasksData: TasksStateType = {}\n\n   constructor() {\n      makeAutoObservable(this)\n   }\n\n   clearAllTasks() {\n      this.tasksData = {}\n   }\n   fetchTasks = flow(function* (this: Tasks, todolistId: string) {\n      init.setAppStatus('loading')\n      try {\n         init.setAppStatus('succeeded')\n         const res = yield todolistsAPI.getTasks(todolistId)\n\n         this.tasksData[todolistId] = res.data.items\n      } catch (err: any) {\n         handleServerNetworkError(err)\n      }\n   })\n   removeTask = flow(function* (this: Tasks, taskId: string, todolistId: string) {\n      init.setAppStatus('loading')\n      try {\n         yield todolistsAPI.deleteTask(todolistId, taskId)\n         const tasks = this.tasksData[todolistId]\n         const index = tasks.findIndex(t => t.id === taskId)\n         if (index > -1) {\n            tasks.splice(index, 1)\n         }\n         init.setAppStatus('succeeded')\n      } catch (err: any) {\n         handleServerNetworkError(err)\n      }\n   })\n   addTask = flow(function* (this: Tasks, title: string, todolistId: string) {\n      init.setAppStatus('loading')\n      try {\n         const res = yield todolistsAPI.createTask(todolistId, title)\n         if (res.data.resultCode === 0) {\n            init.setAppStatus('succeeded')\n            this.tasksData[todolistId].unshift(res.data.data.item)\n         } else {\n            handleServerAppError(res.data)\n         }\n      } catch (err: any) {\n         handleServerNetworkError(err)\n      }\n   })\n   updateTask = flow(function* (\n      this: Tasks,\n      taskId: string,\n      todolistId: string,\n      domainModel: UpdateDomainTaskModelType\n   ) {\n      init.setAppStatus('loading')\n      const task = this.tasksData[todolistId].find(t => t.id === taskId)\n      if (!task) {\n         return console.error('task not found in the state')\n      }\n      const apiModel: UpdateTaskModelType = {\n         deadline: task.deadline,\n         description: task.description,\n         priority: task.priority,\n         startDate: task.startDate,\n         title: task.title,\n         status: task.status,\n         ...domainModel,\n      }\n\n      try {\n         const res = yield todolistsAPI.updateTask(todolistId, taskId, apiModel)\n         if (res.data.resultCode === 0) {\n            init.setAppStatus('succeeded')\n            const tasks = this.tasksData[todolistId]\n            const index = tasks.findIndex(t => t.id === taskId)\n            if (index > -1) {\n               tasks[index] = { ...tasks[index], ...domainModel }\n            }\n         } else {\n            handleServerAppError(res.data)\n         }\n      } catch (err: any) {\n         handleServerNetworkError(err)\n      }\n   })\n   deleteTodolist(todolistId: string) {\n      delete this.tasksData[todolistId]\n   }\n}\nexport default new Tasks()\n","import React, { ChangeEvent, useCallback } from 'react'\r\nimport { Checkbox, IconButton } from '@material-ui/core'\r\nimport { EditableSpan } from '../../../../common/components/EditableSpan/EditableSpan'\r\nimport { Delete } from '@material-ui/icons'\r\nimport tasks from '../../../../store/tasks'\r\nimport { TaskPropsType, TaskStatuses } from '../../../../common/types/types'\r\n\r\nexport const Task = React.memo(({ task, todolistId }: TaskPropsType) => {\r\n   const removeTaskHandler = useCallback(\r\n      () => tasks.removeTask(task.id, todolistId),\r\n      [task.id, todolistId]\r\n   )\r\n   const onChangeHandler = useCallback(\r\n      (e: ChangeEvent<HTMLInputElement>) => {\r\n         const newIsDoneValue = e.currentTarget.checked\r\n         tasks.updateTask(task.id, todolistId, {\r\n            status: newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New,\r\n         })\r\n      },\r\n      [task.id, todolistId]\r\n   )\r\n\r\n   const onTitleChangeHandler = useCallback(\r\n      (newValue: string) => {\r\n         tasks.updateTask(task.id, todolistId, { title: newValue })\r\n      },\r\n      [task.id, todolistId]\r\n   )\r\n\r\n   return (\r\n      <div key={task.id} className={task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n         <Checkbox\r\n            checked={task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n         />\r\n         <EditableSpan value={task.title} onChange={onTitleChangeHandler} />\r\n         <IconButton onClick={removeTaskHandler}>\r\n            <Delete />\r\n         </IconButton>\r\n      </div>\r\n   )\r\n})\r\n","import React, { useCallback, useEffect } from 'react'\r\nimport { AddItemForm } from '../../../common/components/AddItemForm/AddItemForm'\r\nimport { EditableSpan } from '../../../common/components/EditableSpan/EditableSpan'\r\nimport { Button, IconButton } from '@material-ui/core'\r\nimport { Delete } from '@material-ui/icons'\r\nimport { Task } from './Task/Task'\r\nimport todolists from '../../../store/todolists'\r\nimport { observer } from 'mobx-react-lite'\r\nimport tasks from '../../../store/tasks'\r\nimport { FilterValuesType, TaskStatuses, TodolistComponentType } from '../../../common/types/types'\r\n\r\nexport const Todolist = observer(function ({ demo = false, todolist }: TodolistComponentType) {\r\n   const tasksData = tasks.tasksData[todolist.id]\r\n\r\n   useEffect(() => {\r\n      if (demo) {\r\n         return\r\n      }\r\n      tasks.fetchTasks(todolist.id)\r\n   }, [])\r\n\r\n   const addTask = useCallback(\r\n      (title: string) => {\r\n         tasks.addTask(title, todolist.id)\r\n      },\r\n      [todolist.id]\r\n   )\r\n\r\n   const removeTodolist = () => {\r\n      todolists.removeTodolist(todolist.id)\r\n   }\r\n   const changeTodolistTitle = useCallback(\r\n      (title: string) => {\r\n         todolists.changeTodolistTitle(todolist.id, title)\r\n      },\r\n      [todolist.id]\r\n   )\r\n\r\n   const changeFilterClickHandler = (filter: FilterValuesType) =>\r\n      todolists.changeTodolistFilter(todolist.id, filter)\r\n\r\n   let tasksForTodolist = tasksData\r\n\r\n   if (todolist.filter === 'active') {\r\n      tasksForTodolist = tasksData.filter(t => t.status === TaskStatuses.New)\r\n   }\r\n   if (todolist.filter === 'completed') {\r\n      tasksForTodolist = tasksData.filter(t => t.status === TaskStatuses.Completed)\r\n   }\r\n   return (\r\n      <div>\r\n         <h3>\r\n            <EditableSpan value={todolist.title} onChange={changeTodolistTitle} />\r\n            <IconButton onClick={removeTodolist} disabled={todolist.entityStatus === 'loading'}>\r\n               <Delete />\r\n            </IconButton>\r\n         </h3>\r\n         <AddItemForm\r\n            addItem={addTask}\r\n            disabled={todolist.entityStatus === 'loading'}\r\n            placeholder={'new Task'}\r\n         />\r\n         <div>\r\n            {tasksForTodolist &&\r\n               tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={todolist.id} />)}\r\n         </div>\r\n         <div style={{ paddingTop: '10px' }}>\r\n            <Button\r\n               variant={todolist.filter === 'all' ? 'outlined' : 'text'}\r\n               onClick={() => changeFilterClickHandler('all')}\r\n               color={'default'}\r\n            >\r\n               All\r\n            </Button>\r\n            <Button\r\n               variant={todolist.filter === 'active' ? 'outlined' : 'text'}\r\n               onClick={() => changeFilterClickHandler('active')}\r\n               color={'primary'}\r\n            >\r\n               Active\r\n            </Button>\r\n            <Button\r\n               variant={todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n               onClick={() => changeFilterClickHandler('completed')}\r\n               color={'secondary'}\r\n            >\r\n               Completed\r\n            </Button>\r\n         </div>\r\n      </div>\r\n   )\r\n})\r\n","import React, { useCallback, useEffect } from 'react'\nimport { Grid, Paper } from '@material-ui/core'\nimport { AddItemForm } from '../../common/components/AddItemForm/AddItemForm'\nimport { Todolist } from './Todolist/Todolist'\nimport { Redirect } from 'react-router-dom'\nimport { observer } from 'mobx-react-lite'\nimport auth from '../../store/auth'\nimport todolists from '../../store/todolists'\nimport { ComponentType } from '../../common/types/types'\nimport '../../app/App.css'\n\nexport const TodolistsList: React.FC<ComponentType> = observer(({ demo }) => {\n   const todolistsItems = todolists.todos\n   const isLoggedIn = auth.isLoggedIn\n\n   useEffect(() => {\n      if (demo || !isLoggedIn) return\n      todolists.fetchTodolists()\n   }, [demo, isLoggedIn])\n\n   const addTodolist = useCallback((title: string) => {\n      todolists.addTodolist(title)\n   }, [])\n\n   if (!isLoggedIn) {\n      return <Redirect to={'/login'} />\n   }\n   return (\n      <>\n         <Grid\n            container\n            style={{ margin: 20, width: 315, padding: 20 }}\n            className=\"formControl\"\n            justifyContent={'center'}\n         >\n            <AddItemForm addItem={addTodolist} placeholder={'new List'} />\n         </Grid>\n         <Grid container spacing={3} justifyContent={'center'}>\n            {todolistsItems.map(tl => (\n               <Grid item key={tl.id}>\n                  <Paper\n                     style={{\n                        padding: 10,\n                        backgroundColor: 'rgba(255, 255, 255, 0.9)',\n                        borderRadius: 15,\n                     }}\n                  >\n                     <Todolist todolist={tl} demo={demo} />\n                  </Paper>\n               </Grid>\n            ))}\n         </Grid>\n      </>\n   )\n})\n","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, { AlertProps } from '@material-ui/lab/Alert'\r\nimport init from '../../../store/init'\r\nimport { observer } from 'mobx-react-lite'\r\n\r\nfunction Alert(props: AlertProps) {\r\n   return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport const ErrorSnackbar = observer(function () {\r\n   const error = init.error\r\n   const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n      if (reason === 'clickaway') {\r\n         return\r\n      }\r\n      init.setAppError(null)\r\n   }\r\n\r\n   const isOpen = error !== null\r\n\r\n   return (\r\n      <Snackbar open={isOpen} autoHideDuration={6000} onClose={handleClose}>\r\n         <Alert onClose={handleClose} severity=\"error\">\r\n            {error}\r\n         </Alert>\r\n      </Snackbar>\r\n   )\r\n})\r\n","import React from 'react'\nimport {\n   Checkbox,\n   FormControl,\n   FormControlLabel,\n   FormGroup,\n   FormLabel,\n   TextField,\n   Button,\n   Grid,\n} from '@material-ui/core'\nimport { useFormik } from 'formik'\nimport { Redirect } from 'react-router-dom'\nimport auth from '../../store/auth'\nimport { observer } from 'mobx-react-lite'\nimport { FormValuesType } from '../../common/types/types'\nimport '../../app/App.css'\n\nexport const Login = observer(() => {\n   const isLoggedIn = auth.isLoggedIn\n\n   const formik = useFormik({\n      validate: values => {\n         if (!values.email) {\n            return {\n               email: 'Email is required',\n            }\n         }\n         if (!values.password) {\n            return {\n               password: 'Password is required',\n            }\n         }\n      },\n      initialValues: {\n         email: '',\n         password: '',\n         rememberMe: false,\n      },\n      onSubmit: (values: FormValuesType) => {\n         auth.logIn(values)\n      },\n   })\n\n   const testAccountLogin = () => {\n      const testUser = {\n         email: 'free@samuraijs.com',\n         password: 'free',\n         rememberMe: false,\n      }\n      auth.logIn(testUser)\n   }\n\n   if (isLoggedIn) {\n      return <Redirect to={'/'} />\n   }\n\n   return (\n      <Grid container justifyContent=\"center\">\n         <Grid item xs={4}>\n            <form onSubmit={formik.handleSubmit}>\n               <FormControl className=\"formControl\" style={{ padding: 20, marginTop: 20 }}>\n                  <FormLabel>\n                     <p>\n                        To log in get registered{' '}\n                        <a\n                           href={'https://social-network.samuraijs.com/'}\n                           target={'_blank'}\n                           rel=\"noreferrer\"\n                        >\n                           here\n                        </a>\n                     </p>\n                     <p>\n                        or use\n                        <span className=\"testAccountTitle\" onClick={testAccountLogin}>\n                           common test account\n                        </span>\n                     </p>\n                  </FormLabel>\n                  <FormGroup>\n                     <TextField label=\"Email\" margin=\"normal\" {...formik.getFieldProps('email')} />\n                     {formik.errors.email ? (\n                        <div style={{ color: 'red' }}>{formik.errors.email}</div>\n                     ) : null}\n                     <TextField\n                        type=\"password\"\n                        label=\"Password\"\n                        margin=\"normal\"\n                        {...formik.getFieldProps('password')}\n                     />\n                     {formik.errors.password ? (\n                        <div style={{ color: 'red' }}>{formik.errors.password}</div>\n                     ) : null}\n                     <FormControlLabel\n                        label={'Remember me'}\n                        control={\n                           <Checkbox\n                              {...formik.getFieldProps('rememberMe')}\n                              checked={formik.values.rememberMe}\n                           />\n                        }\n                     />\n                     <Button\n                        type={'submit'}\n                        variant={'contained'}\n                        disabled={!formik.values.email || !formik.values.password}\n                        style={{\n                           backgroundColor:\n                              !formik.values.email || !formik.values.password\n                                 ? 'rgba(13, 114, 8, 0.2)'\n                                 : 'rgba(13, 114, 8, 0.8)',\n                        }}\n                     >\n                        Login\n                     </Button>\n                  </FormGroup>\n               </FormControl>\n            </form>\n         </Grid>\n      </Grid>\n   )\n})\n","import React, { useCallback, useEffect } from 'react'\nimport './App.css'\nimport {\n   AppBar,\n   Button,\n   CircularProgress,\n   Container,\n   LinearProgress,\n   Toolbar,\n   Typography,\n} from '@material-ui/core'\nimport { TodolistsList } from '../features/TodolistsList/TodolistsList'\nimport { ErrorSnackbar } from '../common/components/ErrorSnackbar/ErrorSnackbar'\nimport { Route } from 'react-router-dom'\nimport { Login } from '../features/Login/Login'\nimport init from '../store/init'\nimport auth from '../store/auth'\nimport { observer } from 'mobx-react-lite'\nimport { ComponentType } from '../common/types/types'\n\nconst App = observer(({ demo = false }: ComponentType) => {\n   const status = init.status\n   const isInitialized = init.isInitialized\n   const isLoggedIn = auth.isLoggedIn\n\n   useEffect(() => {\n      init.initializeApp()\n   }, [])\n\n   const logoutHandler = useCallback(() => {\n      auth.logOut()\n   }, [])\n\n   if (!isInitialized) {\n      return (\n         <div\n            style={{\n               position: 'fixed',\n               top: '30%',\n               textAlign: 'center',\n               width: '100%',\n            }}\n         >\n            <CircularProgress />\n         </div>\n      )\n   }\n\n   return (\n      <div className=\"App\">\n         <ErrorSnackbar />\n         <AppBar position=\"static\" style={{ background: 'rgba(13, 114, 8, 0.8)' }}>\n            <Toolbar>\n               <Typography variant=\"h6\">Todolists</Typography>\n               {isLoggedIn && (\n                  <Button\n                     color=\"inherit\"\n                     onClick={logoutHandler}\n                     style={{ right: 20, position: 'absolute' }}\n                  >\n                     Log out\n                  </Button>\n               )}\n            </Toolbar>\n            <div className=\"progress\">{status === 'loading' && <LinearProgress />}</div>\n         </AppBar>\n         <Container>\n            <Route exact path={'/'} render={() => <TodolistsList demo={demo} />} />\n            <Route path={'/login'} render={() => <Login />} />\n         </Container>\n      </div>\n   )\n})\nexport default App\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport * as serviceWorker from './serviceWorker'\r\nimport App from './app/App'\r\nimport { BrowserRouter as Router, HashRouter } from 'react-router-dom'\r\n\r\nReactDOM.render(\r\n   <HashRouter>\r\n      <App />\r\n   </HashRouter>,\r\n\r\n   document.getElementById('root')\r\n)\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n"],"sourceRoot":""}